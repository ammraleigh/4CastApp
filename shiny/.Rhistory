?<<
?"<<"
??<<
??-
library(data.table)
options( java.parameters = "-Xmx50g" )
library(tm)
#library(qdap)
library(openNLP)
library(RWeka)
library("quanteda")  #Use sparse matrix document-feature matrix (dfm) to phase out dense matrix objects
library(dplyr)
library("slam")
library("methods")
#Windows
RDataPath <- "C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/data/"
en_US_path <- file.path ( "C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/Coursera-SwiftKey/final" , "en_US" )
load(paste(RDataPath, "enDictionary.RData"))
load(paste(RDataPath, "enDictionary.RData", sep=""))
en_US.corpus <- Corpus(DirSource(en_US_path, encoding="UTF-8"), readerControl=list(language="eng", reader=readPlain))
lengths <- sapply(1:3,function(i) length(en_US.corpus[[i]]$content));lengths
#sapply(1,function(i) length(en_US.corpus[[i]]$content))
en_US.corpus[[1]]$content <- en_US.corpus[[1]]$content[1:ceiling(.1*length(en_US.corpus[[1]]$content))]
en_US.corpus[[2]]$content <- en_US.corpus[[2]]$content[1:ceiling(.1*length(en_US.corpus[[2]]$content))]
en_US.corpus[[3]]$content <- en_US.corpus[[3]]$content[1:ceiling(.1*length(en_US.corpus[[3]]$content))]
lengths <- sapply(1:3,function(i) length(en_US.corpus[[i]]$content));lengths
#lengths <- sapply(1,function(i) length(en_US.corpus[[i]]$content));lengths
text <- c(en_US.corpus[[1]]$content, en_US.corpus[[2]]$content, en_US.corpus[[3]]$content)
#text <- c(en_US.corpus[[1]]$content)
rm(en_US.corpus); gc()
corpus <- VCorpus(VectorSource(text));
rm(text); gc()
#iconv: for sub="byte" the indication is "<xx>" with the hex code of the byte. Then use removeNumbers to remove the byte.
corpus <- tm_map(corpus, content_transformer(function(x) iconv(enc2utf8(x), sub = "byte")))
#iconv: convert to only printable, one-byte (ENGLISH) ASCII (non printable characters are removed)
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to='ASCII', sub='')))
corpus <- tm_map(corpus, content_transformer(tolower))
# corpus <- tm_map(corpus, content_transformer(function(x, pattern) gsub(pattern, "<>", x)), "'")
corpus <- tm_map(corpus, content_transformer(function(x, pattern) gsub(pattern, " ", x)), "/|@|\\|~|_|\\*|#|%|\\^|&|<|>")
corpus <- tm_map(corpus, removePunctuation)   #preserve_intra_word_dashes = TRUE
#removing profanity is taking too long
#corpus <- removeProfanity(corpus, "C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/Coursera-SwiftKey/final/temp/")
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, subset(letters, !letters=="a" & !letters=="i"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- as.vector(unlist(sapply(corpus, '[',"content")))
save(unigram, file= paste(RDataPath, "unigram.RData", sep = "" ))
rm(unigram); gc()
unigram <- data.table()
n <- 5
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n) {
end <- length(corpus)
}
tempTokens <- dfm(corpus[start:end], ngrams = 1)
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wUnigram=unlist(attributes(tempTokens)), ufreq=tempTokens)
unigram <- rbind(unigram, tempTable)
setkey(unigram, wUnigram)
unigram <- unigram[, sum(ufreq), by=wUnigram]
setnames(unigram, names(unigram), c("wUnigram","ufreq"))
}
View(unigram)
unigram <- subset(unigram,!unigram$wUnigram=="")
unigram <- subset(unigram,!is.na(unigram$wUnigram))
save(unigram, file= paste(RDataPath, "unigram.RData", sep = "" ))
rm(unigram); gc()
bigram <- data.table()
n <- 10
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
end <- length(corpus)
}
tempTokens <- dfm(corpus[start:end], ngrams = 2, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wBigram=unlist(attributes(tempTokens)), bfreq=tempTokens)
bigram <- rbind(bigram, tempTable)
setkey(bigram, wBigram)
bigram <- bigram[, sum(bfreq), by=wBigram]
setnames(bigram, names(bigram), c("wBigram","bfreq"))
}
bigram <- subset(bigram,!bigram$wBigram == "")
bigram <- subset(bigram,!bigram$wBigram == "")
bigram <- subset(bigram,!is.na(bigram$wBigram))
save(bigram, file= paste(RDataPath, "bigram.RData", sep=""))
rm(bigram); gc()
trigram <- data.table()
n <- 20
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
}
tempTokens <- dfm(corpus[start:end], ngrams = 3, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wTrigram=unlist(attributes(tempTokens)), tfreq=tempTokens)
trigram <- rbind(trigram, tempTable)
setkey(trigram, wTrigram)
trigram <- trigram[, sum(tfreq), by=wTrigram]
setnames(trigram, names(trigram), c("wTrigram","tfreq"))
}
warnings()
trigram <- subset(trigram,!trigram$wTrigram == "")
trigram <- subset(trigram,!is.na(trigram$wTrigram))
save(trigram, file= paste(RDataPath, "trigram.RData", sep=""))
rm(trigram); gc()
unigram <- data.table()
n <- 5
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n) {
end <- length(corpus)
}
tempTokens <- dfm(corpus[start:end], ngrams = 1)
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wUnigram=unlist(attributes(tempTokens)), ufreq=tempTokens)
unigram <- rbind(unigram, tempTable)
setkey(unigram, wUnigram)
unigram <- unigram[, sum(ufreq), by=wUnigram]
setnames(unigram, names(unigram), c("wUnigram","ufreq"))
}
unigram <- subset(unigram,!unigram$wUnigram=="")
unigram <- subset(unigram,!is.na(unigram$wUnigram))
unigram <- inner_join(unigram, enDictionary, by = "wUnigram")
save(unigram, file= paste(RDataPath, "unigram.RData", sep = "" ))
rm(unigram); gc()
bigram <- data.table()
n <- 10
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
end <- length(corpus)
}
tempTokens <- dfm(corpus[start:end], ngrams = 2, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wBigram=unlist(attributes(tempTokens)), bfreq=tempTokens)
bigram <- rbind(bigram, tempTable)
setkey(bigram, wBigram)
bigram <- bigram[, sum(bfreq), by=wBigram]
setnames(bigram, names(bigram), c("wBigram","bfreq"))
}
bigram <- subset(bigram,!bigram$wBigram == "")
bigram <- subset(bigram,!is.na(bigram$wBigram))
save(bigram, file= paste(RDataPath, "bigram.RData", sep=""))
bigram$wUnigram <- sapply(bigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
View(bigram)
bigram$wUnigram <- NULL
View(bigram)
bigram$wUnigramN <- sapply(bigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
View(bigram)
bigram[30]
bigram[50]
bigram[100]
bigram[300]
bigram[500]
bigram[1000]
bigram[5000]
bigram[10000]
bigram[200000]
View(bigram)
bigram$wUnigramN <- NULL
bigram$wUnigramN-1 <- sapply(bigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
bigram$wUnigramNminus1 <- sapply(bigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
?dfm
View(bigram)
bigram$wBigram[1085110]
grep( " [[:alpha:]]*$", bigram$wBigram[1085110],)
grep( " [[:alpha:]]*$", bigram$wBigram[1085110])
sub(bigram$wBigram[1085110], pattern = " [[:alpha:]]*$", replacement = "TESTING")
sub(bigram$wBigram[1085110], pattern = "^[[:alpha:]]* $", replacement = "TESTING")
sub(bigram$wBigram[1085110], pattern = "^[[:alpha:]]* ", replacement = "TESTING")
bigram$wUnigramN <- sapply(bigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
View(bigram)
?inner_join
bigram <- inner_join(bigram, enDictionary, by = c("wUnigramNminus1" = "wUnigram"))
setkey(bigram, wUnigramNminus1); setkey(enDictionary, wUnigram)
bigram <- inner_join(bigram, enDictionary, by = c("wUnigramNminus1" = "wUnigram"))
bigram <- inner_join(bigram, enDictionary, by = c("wUnigramNminus1" = "wUnigram"))
bigram <- inner_join(bigram, enDictionary, by = ("wUnigramNminus1" = "wUnigram"))
?merge.data.frame
bigram <- merge(bigram, enDictionary, by.x = "wUnigramNminus1", by.y = "wUnigram")
setkey(bigram, wUnigramN); setkey(enDictionary, wUnigram)
bigram <- merge(bigram, enDictionary, by.x = "wUnigramN", by.y = "wUnigram")
grep ("absentte*$", enDictionary)
grep ("absentteism", enDictionary)
grep ("absenteeism", enDictionary)
bigram <- data.table()
n <- 10
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
end <- length(corpus)
}
tempTokens <- dfm(corpus[start:end], ngrams = 2, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wBigram=unlist(attributes(tempTokens)), bfreq=tempTokens)
bigram <- rbind(bigram, tempTable)
setkey(bigram, wBigram)
bigram <- bigram[, sum(bfreq), by=wBigram]
setnames(bigram, names(bigram), c("wBigram","bfreq"))
}
bigram <- subset(bigram,!bigram$wBigram == "")
bigram <- subset(bigram,!is.na(bigram$wBigram))
View(bigram)
bigram$wUnigramN <- sapply(bigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
setkey(bigram, wUnigramN); setkey(enDictionary, wUnigram)
bigram <- merge(bigram, enDictionary, by.x = "wUnigramN", by.y = "wUnigram")
bigram$wUnigramNminus1 <- sapply(bigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
setkey(bigram, wUnigramNminus1); setkey(enDictionary, wUnigram)
bigram <- merge(bigram, enDictionary, by.x = "wUnigramNminus1", by.y = "wUnigram")
save(bigram, file= paste(RDataPath, "bigram.RData", sep=""))
rm(bigram); gc()
trigram <- data.table()
n <- 20
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
}
tempTokens <- dfm(corpus[start:end], ngrams = 3, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wTrigram=unlist(attributes(tempTokens)), tfreq=tempTokens)
trigram <- rbind(trigram, tempTable)
setkey(trigram, wTrigram)
trigram <- trigram[, sum(tfreq), by=wTrigram]
setnames(trigram, names(trigram), c("wTrigram","tfreq"))
}
trigram <- subset(trigram,!trigram$wTrigram == "")
trigram <- subset(trigram,!is.na(trigram$wTrigram))
bigram <- data.table()
n <- 10
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
end <- length(corpus)
}
tempTokens <- dfm(corpus[start:end], ngrams = 2, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wBigram=unlist(attributes(tempTokens)), bfreq=tempTokens)
bigram <- rbind(bigram, tempTable)
setkey(bigram, wBigram)
bigram <- bigram[, sum(bfreq), by=wBigram]
setnames(bigram, names(bigram), c("wBigram","bfreq"))
}
bigram <- subset(bigram,!bigram$wBigram == "")
bigram <- subset(bigram,!is.na(bigram$wBigram))
bigram$wUnigramN <- sapply(bigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
setkey(bigram, wUnigramN); setkey(enDictionary, wUnigram)
bigram <- merge(bigram, enDictionary, by.x = "wUnigramN", by.y = "wUnigram")
bigram$wUnigramNminus1 <- sapply(bigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
setkey(bigram, wUnigramNminus1); setkey(enDictionary, wUnigram)
bigram <- merge(bigram, enDictionary, by.x = "wUnigramNminus1", by.y = "wUnigram")
bigram$wUnigramN <- NULL
bigram$wUnigramNminus1 <- NULL
save(bigram, file= paste(RDataPath, "bigram.RData", sep=""))
rm(bigram); gc()
trigram$wUnigramN <- sapply(trigram$wTrigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
View(trigram)
trigram$wUnigramN <- NULL
trigram$wBigramNminus1 <- sapply(trigram$wTrigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
View(trigram)
trigram$wBigramNminus1 <- NULL
trigram$wUnigram <- sapply(trigram$wTrigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
View(trigram)
trigram$wUnigram <- NULL
trigram$wBigram <- sapply(trigram$wTrigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
View(trigram)
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
trigram$wUnigram <- NULL
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
setkey(trigram, wUnigram); setkey(enDictionary, wUnigram)
trigram <- merge(trigram, enDictionary, by.x = "wUnigramN", by.y = "wUnigram")
trigram <- merge(trigram, enDictionary, by.x = "wUnigram", by.y = "wUnigram")
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
rm(trigram)
trigram <- data.table()
n <- 20
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
}
tempTokens <- dfm(corpus[start:end], ngrams = 3, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wTrigram=unlist(attributes(tempTokens)), tfreq=tempTokens)
trigram <- rbind(trigram, tempTable)
setkey(trigram, wTrigram)
trigram <- trigram[, sum(tfreq), by=wTrigram]
setnames(trigram, names(trigram), c("wTrigram","tfreq"))
}
trigram <- subset(trigram,!trigram$wTrigram == "")
trigram <- subset(trigram,!is.na(trigram$wTrigram))
View(trigram)
trigram$wBigram <- sapply(trigram$wTrigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
setkey(trigram, wUnigram); setkey(enDictionary, wUnigram)
trigram <- merge(trigram, enDictionary, by.x = "wUnigram", by.y = "wUnigram")
trigram$wUnigram <- NULL
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
View(trigram)
setkey(trigram, wUnigram); setkey(enDictionary, wUnigram)
trigram <- merge(trigram, enDictionary, by.x = "wUnigram", by.y = "wUnigram")
trigram$wUnigram <- NULL
View(trigram)
View(trigram)
rm(trigram)
trigram <- data.table()
n <- 20
k <- ceiling(length(corpus)/n)
for(i in 1:n){
start <- (i-1)*k+1
end <- i*k
if(i==n){
}
tempTokens <- dfm(corpus[start:end], ngrams = 3, concatenator = " ")
tempTokens <- as.DocumentTermMatrix(tempTokens, weighting = weightTf )
tempTokens <- col_sums(tempTokens > 0)
tempTable <- data.table(wTrigram=unlist(attributes(tempTokens)), tfreq=tempTokens)
trigram <- rbind(trigram, tempTable)
setkey(trigram, wTrigram)
trigram <- trigram[, sum(tfreq), by=wTrigram]
setnames(trigram, names(trigram), c("wTrigram","tfreq"))
}
trigram <- subset(trigram,!trigram$wTrigram == "")
trigram <- subset(trigram,!is.na(trigram$wTrigram))
trigram$wBigram <- sapply(trigram$wTrigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
View(trigram)
rm(tempTokens)
View(trigram)
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = " [[:alpha:]]*$", replacement = ""))
View(trigram)
View(trigram)
setkey(trigram, wUnigram); setkey(enDictionary, wUnigram)
trigram <- merge(trigram, enDictionary, by.x = "wUnigram", by.y = "wUnigram")
trigram$wUnigram <- NULL
trigram$wUnigram <- sapply(trigram$wBigram, function(x) sub(x, pattern = "^[[:alpha:]]* ", replacement = ""))
debugSource('~/Data Science/Coursera John Hopkins/10 Capstone/Project/getNgrams.R', echo=TRUE)
lengths
lengths
ceiling(.8*length(enCorpus[[1]]$content))+1
length(enCorpus[[1]]$content)
.8*length(enCorpus[[2]]$content))+1
ceiling(.8*length(enCorpus[[2]]$content))+1
length(enCorpus[[2]]$content)
ceiling(.8*length(enCorpus[[3]]$content))+1
length(enCorpus[[3]]$content)
length(enTestAll)
<small>Evidence of this ... our entire prototype system was developed in less than 3 days! Thank you for your attention and we look forward to hearing from you regarding our request for angel funding of $200k.  -  The Product Team</small>
# ```{r, echo=FALSE}
<small>Evidence of our commitment and excitement ... our entire prototype 4Cast app was developed in less than 3 days!
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
print(
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
source('~/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/partitionData.R', echo=TRUE)
source('~/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/partitionData.R', echo=TRUE)
?load
shinyPath <- "C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/data/"
load(paste0(shinyPath,"*.RData"))
load(shinyPath)
load("C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/data/.RData")
load("C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/data/*.RData")
load("C:/Users/ann/Documents/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/data")
theFiles <- list.files(shinyPath)
theFiles
theFiles <- list.files(shinyPath)
for (i in 1:length(theFiles)) {
load(theFiles[i])
}
theFiles <- list.files(shinyPath)
for (i in 1:length(theFiles)) {
load(paste0(shinyPath,theFiles[i]))
}
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
source('~/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/partitionData.R', echo=TRUE)
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
source('~/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/loadData.R', echo=TRUE)
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
?source
source('~/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny/loadData.R', echo=TRUE)
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
?load
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
?get
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
environment()
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
?verbatimTextOutput
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
shiny::runApp('Data Science/Coursera John Hopkins/10 Capstone/Project/shiny')
setwd("~/Data Science/Coursera John Hopkins/10 Capstone/Project/shiny")
shiny::runApp()
?runApp
shiny::runApp(display.mode="showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
